#!/usr/bin/env bash
#
# Copyright 2020 Tymoteusz Blazejczyk
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Exit on error
set -eo pipefail

function color_cyan {
    # Print text with cyan color
    echo -e "\e[1;36m$1\e[0m"
}

function color_yellow {
    # Print text with yellow color
    echo -e "\e[1;33m$1\e[0m"
}

function color_green {
    # Print text with green color
    echo -e "\e[1;32m$1\e[0m"
}

function color_red {
    # Print text with red color
    echo -e "\e[1;31m$1\e[0m"
}

function command_exists {
    # Check if provided command exists
    command -v "$1" 2>&1 >/dev/null
}

function go_lint {
    local FORMAT_ARGUMENTS
    local ARGUMENTS
    local FAILED

    FAILED=0
    ARGUMENTS=${@:-./...}
    FORMAT_ARGUMENTS=$(echo "$ARGUMENTS" | sed 's/\.\.\././')

    # Validating Go imports
    if command_exists goimports; then
        local OUTPUT

        if ! command_exists colordiff; then
            color_red "The colordiff tool is not installed"
            exit 1
        fi

        OUTPUT=$(goimports -l $FORMAT_ARGUMENTS || true)

        if [[ -n "$OUTPUT" ]]; then
            color_red "Go imports are not formatted correctly"

            color_cyan "Listing all ill-formatted files:"
            echo "$OUTPUT"

            color_cyan "Detailed formatting differences:"
            goimports -d -e $FORMAT_ARGUMENTS | colordiff
            FAILED=1
        fi
    else
        color_red "The goimports tool is not installed"
    fi

    # Go source files formatting
    if command_exists gofmt; then
        local OUTPUT

        if ! command_exists colordiff; then
            color_red "The colordiff tool is not installed"
            exit 1
        fi

        OUTPUT=$(gofmt -l $FORMAT_ARGUMENTS || true)

        if [[ -n "$OUTPUT" ]]; then
            color_red "Go source files are not formatted correctly"

            color_cyan "Listing all ill-formatted files:"
            echo "$OUTPUT"

            color_cyan "Detailed formatting differences:"
            gofmt -d -e $FORMAT_ARGUMENTS | colordiff
            FAILED=1
        fi
    else
        color_red "The gofmt tool is not installed"
    fi

    # Go source files linting with the revive tool
    if command_exists revive; then
        local OUTPUT

        if ! revive -formatter friendly $ARGUMENTS; then
            FAILED=1
        fi
    else
        color_red "The revive tool is not installed"
    fi

    # Go source files linting with the golangci-lint tool
    if command_exists golangci-lint; then
        local OUTPUT

        if ! golangci-lint run $ARGUMENTS; then
            FAILED=1
        fi
    else
        color_red "The golangci-lint tool is not installed"
    fi

    # Go source files linting with the errcheck tool
    if command_exists errcheck; then
        local OUTPUT
        local OPTIONS

        OPTIONS="-ignoregenerated -blank -asserts"

        if [[ -f "./errcheck_excludes.txt" ]]; then
            OPTIONS="$OPTIONS -exclude errcheck_excludes.txt"
        fi

        if ! errcheck $OPTIONS $ARGUMENTS; then
            FAILED=1
        fi
    else
        color_red "The errcheck tool is not installed"
    fi

    return $FAILED
}

go_lint $@
