# Copyright 2020 Tymoteusz Blazejczyk
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

stages:
    - build
    - test
    - deploy
    - cleanup

.create-go-module: &create-go-module |-
    # Creating Go module

    # Initializing Go module
    go mod init gitlab.com/tymonx/gitlab-ci

    # Creating main Go source file
    cat <<-EOF > "ci.go"
    package ci

    import "fmt"

    // MyFunc prints.
    func MyFunc() {
        fmt.Println("My function")
    }
    EOF

    # Auto-formatting Go source files
    go fmt ./

.create-go-test: &create-go-test |-
    # Creating Go module tests

    # Creating main Go test file
    cat <<-EOF > "ci_test.go"
    package ci_test

    import (
        "fmt"
        "testing"

        ci "gitlab.com/tymonx/gitlab-ci"
    )

    func Example() {
        fmt.Println("Hello from Go!")

        // Output:
        // Hello from Go!
    }

    func TestMyFunc(_ *testing.T) {
        ci.MyFunc()
    }
    EOF

    # Auto-formatting Go source files
    go fmt ./

.build:
    stage: build
    variables:
        DOCKER_IMAGE: docker
        DOCKER_VERSION: 19.03.8
        DOCKER_TLS_CERTDIR: "/certs"
        GO_DOCKER_NAME: golang
        GO_VERSION: 1.14.3
        GO_BASE_IMAGE: ""
    image: ${DOCKER_IMAGE}:${DOCKER_VERSION}
    services:
        - ${DOCKER_IMAGE}:${DOCKER_VERSION}-dind
    before_script:
        # Login to the GitLab Docker registry
        - >
            echo "$CI_REGISTRY_PASSWORD" |
            docker login
            --username "$CI_REGISTRY_USER"
            --password-stdin
            "$CI_REGISTRY"
    script:
        # Get the latest git tag
        - VERSION=$(git describe --exact-match --abbrev=0 2>/dev/null || echo "${CI_COMMIT_TAG:-v0.0.0}")
        # Remove the 'v' version prefix
        - VERSION=(echo "$VERSION" | sed 's/^v//')
        # Download the latest Docker image
        - docker pull "$CI_REGISTRY_IMAGE:latest" || true
        # Create Docker tag
        - TAG=$GO_VERSION${GO_BASE_IMAGE+-}$GO_BASE_IMAGE-$CI_PIPELINE_ID
        # Build a Docker image
        - >
            docker build
            --cache-from "$CI_REGISTRY_IMAGE:latest"
            --build-arg GO_VERSION=$GO_VERSION
            --build-arg GO_BASE_IMAGE=$GO_BASE_IMAGE
            --build-arg GO_DOCKER_NAME=$GO_DOCKER_NAME
            --build-arg VERSION=$VERSION
            --build-arg BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            --build-arg VCS_REF=$CI_COMMIT_SHORT_SHA
            --tag "$CI_REGISTRY_IMAGE:$TAG"
            .
        # Push to the GitLab Docker registry
        - docker push "$CI_REGISTRY_IMAGE:$TAG"

.test:
    stage: test
    variables:
        GO_VERSION: 1.14.3
        GO_BASE_IMAGE: ""
        GIT_STRATEGY: none
    image: ${CI_REGISTRY_IMAGE}:${GO_VERSION}${GO_BASE_IMAGE:+-}${GO_BASE_IMAGE}-${CI_PIPELINE_ID}
    script:
        - *create-go-module
        - *create-go-test
        - go-format
        - go-lint
        - go-build
        - go-test

.deploy:
    stage: deploy
    variables:
        DOCKER_IMAGE: docker
        DOCKER_VERSION: 19.03.8
        DOCKER_TLS_CERTDIR: "/certs"
        GO_VERSION: 1.14.3
        GO_BASE_IMAGE: ""
        GIT_STRATEGY: none
    image: ${DOCKER_IMAGE}:${DOCKER_VERSION}
    services:
        - ${DOCKER_IMAGE}:${DOCKER_VERSION}-dind
    before_script:
        # Login to the GitLab Docker registry
        - >
            echo "$CI_REGISTRY_PASSWORD" |
            docker login
            --username "$CI_REGISTRY_USER"
            --password-stdin
            "$CI_REGISTRY"
    script:
        # Create Docker tag
        - TAG=$GO_VERSION${GO_BASE_IMAGE+-}$GO_BASE_IMAGE
        # Download image
        - docker pull "$CI_REGISTRY_IMAGE:$TAG-$CI_PIPELINE_ID"
        # Re-tag
        - docker tag "$CI_REGISTRY_IMAGE:$TAG-$CI_PIPELINE_ID" "$CI_REGISTRY_IMAGE:$TAG"
        # Push to the GitLab Docker registry
        - docker push "$CI_REGISTRY_IMAGE:$TAG"

build:
    extends: .build

test:
    extends: .test

deploy:
    extends: .deploy
