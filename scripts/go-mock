#!/usr/bin/env bash
#
# Copyright 2020 Tymoteusz Blazejczyk
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Exit on error
set -eo pipefail

function color_cyan {
    # Print text with cyan color
    echo -e "\e[1;36m$1\e[0m"
}

function color_yellow {
    # Print text with yellow color
    echo -e "\e[1;33m$1\e[0m"
}

function color_green {
    # Print text with green color
    echo -e "\e[1;32m$1\e[0m"
}

function color_red {
    # Print text with red color
    echo -e "\e[1;31m$1\e[0m"
}

function get_module_name {
    # Get module name
    sed -n -E 's/^\s*module\s+([[:graph:]]+)\s*$/\1/p'
}

function list_source_files {
    # List source files
    find "$1" -type f \( -name '*.go' ! -name '*_test.go' ! -path '*/mocks/*' \)
}

function is_package_main {
    # Check if file has package main
    cat "$1" | grep -q -E '^\s*package\s+main\s*$'
}

function filter_interface_names {
    # Filter interface names
    sed -n -E 's/^\s*type\s+([[:graph:]]+)\s+interface\s*\{.*$/\1/p'
}

function create_comma_list {
    # Create list separate with comma ,
    tr '\n' ',' | sed 's/,$//'
}

function create_mock_file {
    # Create mock file
    local INTERFACES
    local GOMOD_FILE
    local MODULE_DIR
    local PACKAGE
    local MODULE
    local INPUT
    local FILE
    local DIR

    # First capture all arguments to a separate variable.
    # This will allow to preserve command invocation from unwanted behavior
    INPUT="$1"

    if is_package_main "$INPUT"; then
        return 0
    fi

    # Get all Go interface names in comma separate list like Sender,Receiver,...
    INTERFACES="$(cat "$INPUT" | filter_interface_names | create_comma_list)"

    if [[ -z "$INTERFACES" ]]; then
        return 0
    fi

    # Get go.mod file
    GOMOD_FILE="$(go env GOMOD)"

    if [[ -z "$GOMOD_FILE" ]]; then
        color_red "The GOMOD environment variable is empty. Mostly the go.mod file is missing"
        return 1
    fi

    if [[ ! -f "$GOMOD_FILE" ]]; then
        color_red "The GOMOD=$GOMOD_FILE file doesn't exist"
        return 1
    fi

    # Absolute path
    GOMOD_FILE="$(readlink -f $GOMOD_FILE)"

    # Get module name
    MODULE="$(cat "$GOMOD_FILE" | get_module_name)"

    # Get module directory
    MODULE_DIR="$(dirname "$GOMOD_FILE")"

    # Get file directory
    DIR="$(dirname "$(readlink -f "$INPUT")")"

    # Package path
    PACKAGE="$(realpath --relative-to="$MODULE_DIR" "$DIR")"

    # Remove dot
    if [[ "$PACKAGE" = "." ]]; then
        PACKAGE=""
    fi

    # Create package path with module path
    PACKAGE="$MODULE${PACKAGE:+/}$PACKAGE"

    # Get directory
    DIR="$(dirname "$INPUT")"

    # Mock file name
    FILE="$(basename "$INPUT")"

    # Output directory for mock files
    DIR="$DIR/mocks"

    # Creating output directory for mock files
    mkdir -p "$DIR"

    echo "Creating $DIR/$FILE mock file with $INTERFACES interfaces..."

    # Create Go mock file using reflect mode and reformat it
    if ! mockgen -package mocks "$PACKAGE" "$INTERFACES" | goimports | gofmt > "$DIR/$FILE"; then
        color_red "Failed to create $DIR/$FILE mock file"
        FAILED=1
    fi

    return $FAILED
}

function create_mock_files {
    # Create mock files
    local FAILED

    FAILED=0

    while IFS= read -r file; do
        if ! create_mock_file "$file"; then
            color_red "Cannot create mock from $file file"
            FAILED=1
        fi
    done

    return $FAILED
}

function go_mock {
    local ARGUMENTS
    local FAILED
    local MOCKS

    # First capture all command line arguments to a separate variable.
    # This will allow to preserve command invocation from unwanted behavior
    ARGUMENTS=${@:-.}

    # Transform substrings from ... to standard .
    ARGUMENTS=$(echo "$ARGUMENTS" | sed 's/\.\.\././')

    # Initialize failed variable
    FAILED=0
    MOCKS=""

    color_cyan "Generating mocks for Go interfaces..."

    # Iterate over all paths to create mock files
    for argument in $ARGUMENTS; do
        if ! MOCKS="${MOCKS}$(list_source_files "$argument" | create_mock_files | tee /dev/stderr)"; then
            FAILED=1
        fi
    done

    # Print status
    if [[ $FAILED -ne 0 ]]; then
        color_red "Mocking failed"
    elif [[ -n "$MOCKS" ]]; then
        color_green "Go mocks generated"
    else
        color_yellow "Warning: no Go interfaces found for mocking"
    fi

    return $FAILED
}

go_mock $@
